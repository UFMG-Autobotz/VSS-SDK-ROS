// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vss_state {

namespace {

const ::google::protobuf::Descriptor* RGB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RGB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pose_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ball_State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ball_State_reflection_ = NULL;
const ::google::protobuf::Descriptor* Robot_State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Robot_State_reflection_ = NULL;
const ::google::protobuf::Descriptor* Global_State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Global_State_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_state_2eproto() {
  protobuf_AddDesc_state_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "state.proto");
  GOOGLE_CHECK(file != NULL);
  RGB_descriptor_ = file->message_type(0);
  static const int RGB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB, b_),
  };
  RGB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RGB_descriptor_,
      RGB::default_instance_,
      RGB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RGB));
  Pose_descriptor_ = file->message_type(1);
  static const int Pose_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, yaw_),
  };
  Pose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pose_descriptor_,
      Pose::default_instance_,
      Pose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pose));
  Ball_State_descriptor_ = file->message_type(2);
  static const int Ball_State_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball_State, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball_State, v_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball_State, k_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball_State, k_v_pose_),
  };
  Ball_State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ball_State_descriptor_,
      Ball_State::default_instance_,
      Ball_State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball_State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball_State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ball_State));
  Robot_State_descriptor_ = file->message_type(3);
  static const int Robot_State_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_State, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_State, v_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_State, k_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_State, k_v_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_State, color_),
  };
  Robot_State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Robot_State_descriptor_,
      Robot_State::default_instance_,
      Robot_State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Robot_State));
  Global_State_descriptor_ = file->message_type(4);
  static const int Global_State_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, balls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, robots_yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, robots_blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, situation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, goals_yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, goals_blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, name_yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, name_blue_),
  };
  Global_State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Global_State_descriptor_,
      Global_State::default_instance_,
      Global_State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global_State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Global_State));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_state_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RGB_descriptor_, &RGB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pose_descriptor_, &Pose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ball_State_descriptor_, &Ball_State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Robot_State_descriptor_, &Robot_State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Global_State_descriptor_, &Global_State::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_state_2eproto() {
  delete RGB::default_instance_;
  delete RGB_reflection_;
  delete Pose::default_instance_;
  delete Pose_reflection_;
  delete Ball_State::default_instance_;
  delete Ball_State_reflection_;
  delete Robot_State::default_instance_;
  delete Robot_State_reflection_;
  delete Global_State::default_instance_;
  delete Global_State_reflection_;
}

void protobuf_AddDesc_state_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013state.proto\022\tvss_state\"&\n\003RGB\022\t\n\001r\030\001 \002"
    "(\r\022\t\n\001g\030\002 \002(\r\022\t\n\001b\030\003 \002(\r\")\n\004Pose\022\t\n\001x\030\001 "
    "\002(\002\022\t\n\001y\030\002 \002(\002\022\013\n\003yaw\030\003 \001(\002\"\220\001\n\nBall_Sta"
    "te\022\035\n\004pose\030\001 \002(\0132\017.vss_state.Pose\022\037\n\006v_p"
    "ose\030\002 \001(\0132\017.vss_state.Pose\022\037\n\006k_pose\030\003 \001"
    "(\0132\017.vss_state.Pose\022!\n\010k_v_pose\030\004 \001(\0132\017."
    "vss_state.Pose\"\260\001\n\013Robot_State\022\035\n\004pose\030\001"
    " \002(\0132\017.vss_state.Pose\022\037\n\006v_pose\030\002 \001(\0132\017."
    "vss_state.Pose\022\037\n\006k_pose\030\003 \001(\0132\017.vss_sta"
    "te.Pose\022!\n\010k_v_pose\030\004 \001(\0132\017.vss_state.Po"
    "se\022\035\n\005color\030\005 \001(\0132\016.vss_state.RGB\"\237\002\n\014Gl"
    "obal_State\022\n\n\002id\030\001 \001(\r\022\016\n\006origin\030\002 \001(\010\022$"
    "\n\005balls\030\003 \003(\0132\025.vss_state.Ball_State\022-\n\r"
    "robots_yellow\030\004 \003(\0132\026.vss_state.Robot_St"
    "ate\022+\n\013robots_blue\030\005 \003(\0132\026.vss_state.Rob"
    "ot_State\022\021\n\tsituation\030\006 \001(\r\022\014\n\004time\030\007 \001("
    "\r\022\024\n\014goals_yellow\030\010 \001(\r\022\022\n\ngoals_blue\030\t "
    "\001(\r\022\023\n\013name_yellow\030\n \001(\t\022\021\n\tname_blue\030\013 "
    "\001(\t", 723);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "state.proto", &protobuf_RegisterTypes);
  RGB::default_instance_ = new RGB();
  Pose::default_instance_ = new Pose();
  Ball_State::default_instance_ = new Ball_State();
  Robot_State::default_instance_ = new Robot_State();
  Global_State::default_instance_ = new Global_State();
  RGB::default_instance_->InitAsDefaultInstance();
  Pose::default_instance_->InitAsDefaultInstance();
  Ball_State::default_instance_->InitAsDefaultInstance();
  Robot_State::default_instance_->InitAsDefaultInstance();
  Global_State::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_state_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_state_2eproto {
  StaticDescriptorInitializer_state_2eproto() {
    protobuf_AddDesc_state_2eproto();
  }
} static_descriptor_initializer_state_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RGB::kRFieldNumber;
const int RGB::kGFieldNumber;
const int RGB::kBFieldNumber;
#endif  // !_MSC_VER

RGB::RGB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vss_state.RGB)
}

void RGB::InitAsDefaultInstance() {
}

RGB::RGB(const RGB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vss_state.RGB)
}

void RGB::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0u;
  g_ = 0u;
  b_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RGB::~RGB() {
  // @@protoc_insertion_point(destructor:vss_state.RGB)
  SharedDtor();
}

void RGB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RGB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RGB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RGB_descriptor_;
}

const RGB& RGB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_state_2eproto();
  return *default_instance_;
}

RGB* RGB::default_instance_ = NULL;

RGB* RGB::New() const {
  return new RGB;
}

void RGB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RGB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(r_, b_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RGB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vss_state.RGB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 r = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_g;
        break;
      }

      // required uint32 g = 2;
      case 2: {
        if (tag == 16) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_b;
        break;
      }

      // required uint32 b = 3;
      case 3: {
        if (tag == 24) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vss_state.RGB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vss_state.RGB)
  return false;
#undef DO_
}

void RGB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vss_state.RGB)
  // required uint32 r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->r(), output);
  }

  // required uint32 g = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->g(), output);
  }

  // required uint32 b = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vss_state.RGB)
}

::google::protobuf::uint8* RGB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vss_state.RGB)
  // required uint32 r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->r(), target);
  }

  // required uint32 g = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->g(), target);
  }

  // required uint32 b = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vss_state.RGB)
  return target;
}

int RGB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 r = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // required uint32 g = 2;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->g());
    }

    // required uint32 b = 3;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RGB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RGB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RGB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RGB::MergeFrom(const RGB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RGB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RGB::CopyFrom(const RGB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RGB::Swap(RGB* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RGB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RGB_descriptor_;
  metadata.reflection = RGB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pose::kXFieldNumber;
const int Pose::kYFieldNumber;
const int Pose::kYawFieldNumber;
#endif  // !_MSC_VER

Pose::Pose()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vss_state.Pose)
}

void Pose::InitAsDefaultInstance() {
}

Pose::Pose(const Pose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vss_state.Pose)
}

void Pose::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  yaw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:vss_state.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pose_descriptor_;
}

const Pose& Pose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_state_2eproto();
  return *default_instance_;
}

Pose* Pose::default_instance_ = NULL;

Pose* Pose::New() const {
  return new Pose;
}

void Pose::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Pose*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, yaw_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vss_state.Pose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_yaw;
        break;
      }

      // optional float yaw = 3;
      case 3: {
        if (tag == 29) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vss_state.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vss_state.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vss_state.Pose)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float yaw = 3;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vss_state.Pose)
}

::google::protobuf::uint8* Pose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vss_state.Pose)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float yaw = 3;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vss_state.Pose)
  return target;
}

int Pose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float yaw = 3;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Pose::Swap(Pose* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(yaw_, other->yaw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pose_descriptor_;
  metadata.reflection = Pose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ball_State::kPoseFieldNumber;
const int Ball_State::kVPoseFieldNumber;
const int Ball_State::kKPoseFieldNumber;
const int Ball_State::kKVPoseFieldNumber;
#endif  // !_MSC_VER

Ball_State::Ball_State()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vss_state.Ball_State)
}

void Ball_State::InitAsDefaultInstance() {
  pose_ = const_cast< ::vss_state::Pose*>(&::vss_state::Pose::default_instance());
  v_pose_ = const_cast< ::vss_state::Pose*>(&::vss_state::Pose::default_instance());
  k_pose_ = const_cast< ::vss_state::Pose*>(&::vss_state::Pose::default_instance());
  k_v_pose_ = const_cast< ::vss_state::Pose*>(&::vss_state::Pose::default_instance());
}

Ball_State::Ball_State(const Ball_State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vss_state.Ball_State)
}

void Ball_State::SharedCtor() {
  _cached_size_ = 0;
  pose_ = NULL;
  v_pose_ = NULL;
  k_pose_ = NULL;
  k_v_pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ball_State::~Ball_State() {
  // @@protoc_insertion_point(destructor:vss_state.Ball_State)
  SharedDtor();
}

void Ball_State::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
    delete v_pose_;
    delete k_pose_;
    delete k_v_pose_;
  }
}

void Ball_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ball_State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ball_State_descriptor_;
}

const Ball_State& Ball_State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_state_2eproto();
  return *default_instance_;
}

Ball_State* Ball_State::default_instance_ = NULL;

Ball_State* Ball_State::New() const {
  return new Ball_State;
}

void Ball_State::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_pose()) {
      if (pose_ != NULL) pose_->::vss_state::Pose::Clear();
    }
    if (has_v_pose()) {
      if (v_pose_ != NULL) v_pose_->::vss_state::Pose::Clear();
    }
    if (has_k_pose()) {
      if (k_pose_ != NULL) k_pose_->::vss_state::Pose::Clear();
    }
    if (has_k_v_pose()) {
      if (k_v_pose_ != NULL) k_v_pose_->::vss_state::Pose::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ball_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vss_state.Ball_State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vss_state.Pose pose = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_v_pose;
        break;
      }

      // optional .vss_state.Pose v_pose = 2;
      case 2: {
        if (tag == 18) {
         parse_v_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_k_pose;
        break;
      }

      // optional .vss_state.Pose k_pose = 3;
      case 3: {
        if (tag == 26) {
         parse_k_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_k_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_k_v_pose;
        break;
      }

      // optional .vss_state.Pose k_v_pose = 4;
      case 4: {
        if (tag == 34) {
         parse_k_v_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_k_v_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vss_state.Ball_State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vss_state.Ball_State)
  return false;
#undef DO_
}

void Ball_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vss_state.Ball_State)
  // required .vss_state.Pose pose = 1;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pose(), output);
  }

  // optional .vss_state.Pose v_pose = 2;
  if (has_v_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->v_pose(), output);
  }

  // optional .vss_state.Pose k_pose = 3;
  if (has_k_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->k_pose(), output);
  }

  // optional .vss_state.Pose k_v_pose = 4;
  if (has_k_v_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->k_v_pose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vss_state.Ball_State)
}

::google::protobuf::uint8* Ball_State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vss_state.Ball_State)
  // required .vss_state.Pose pose = 1;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pose(), target);
  }

  // optional .vss_state.Pose v_pose = 2;
  if (has_v_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->v_pose(), target);
  }

  // optional .vss_state.Pose k_pose = 3;
  if (has_k_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->k_pose(), target);
  }

  // optional .vss_state.Pose k_v_pose = 4;
  if (has_k_v_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->k_v_pose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vss_state.Ball_State)
  return target;
}

int Ball_State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vss_state.Pose pose = 1;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

    // optional .vss_state.Pose v_pose = 2;
    if (has_v_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->v_pose());
    }

    // optional .vss_state.Pose k_pose = 3;
    if (has_k_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->k_pose());
    }

    // optional .vss_state.Pose k_v_pose = 4;
    if (has_k_v_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->k_v_pose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ball_State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ball_State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ball_State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ball_State::MergeFrom(const Ball_State& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pose()) {
      mutable_pose()->::vss_state::Pose::MergeFrom(from.pose());
    }
    if (from.has_v_pose()) {
      mutable_v_pose()->::vss_state::Pose::MergeFrom(from.v_pose());
    }
    if (from.has_k_pose()) {
      mutable_k_pose()->::vss_state::Pose::MergeFrom(from.k_pose());
    }
    if (from.has_k_v_pose()) {
      mutable_k_v_pose()->::vss_state::Pose::MergeFrom(from.k_v_pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ball_State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ball_State::CopyFrom(const Ball_State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ball_State::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  if (has_v_pose()) {
    if (!this->v_pose().IsInitialized()) return false;
  }
  if (has_k_pose()) {
    if (!this->k_pose().IsInitialized()) return false;
  }
  if (has_k_v_pose()) {
    if (!this->k_v_pose().IsInitialized()) return false;
  }
  return true;
}

void Ball_State::Swap(Ball_State* other) {
  if (other != this) {
    std::swap(pose_, other->pose_);
    std::swap(v_pose_, other->v_pose_);
    std::swap(k_pose_, other->k_pose_);
    std::swap(k_v_pose_, other->k_v_pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ball_State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ball_State_descriptor_;
  metadata.reflection = Ball_State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Robot_State::kPoseFieldNumber;
const int Robot_State::kVPoseFieldNumber;
const int Robot_State::kKPoseFieldNumber;
const int Robot_State::kKVPoseFieldNumber;
const int Robot_State::kColorFieldNumber;
#endif  // !_MSC_VER

Robot_State::Robot_State()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vss_state.Robot_State)
}

void Robot_State::InitAsDefaultInstance() {
  pose_ = const_cast< ::vss_state::Pose*>(&::vss_state::Pose::default_instance());
  v_pose_ = const_cast< ::vss_state::Pose*>(&::vss_state::Pose::default_instance());
  k_pose_ = const_cast< ::vss_state::Pose*>(&::vss_state::Pose::default_instance());
  k_v_pose_ = const_cast< ::vss_state::Pose*>(&::vss_state::Pose::default_instance());
  color_ = const_cast< ::vss_state::RGB*>(&::vss_state::RGB::default_instance());
}

Robot_State::Robot_State(const Robot_State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vss_state.Robot_State)
}

void Robot_State::SharedCtor() {
  _cached_size_ = 0;
  pose_ = NULL;
  v_pose_ = NULL;
  k_pose_ = NULL;
  k_v_pose_ = NULL;
  color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Robot_State::~Robot_State() {
  // @@protoc_insertion_point(destructor:vss_state.Robot_State)
  SharedDtor();
}

void Robot_State::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
    delete v_pose_;
    delete k_pose_;
    delete k_v_pose_;
    delete color_;
  }
}

void Robot_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot_State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Robot_State_descriptor_;
}

const Robot_State& Robot_State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_state_2eproto();
  return *default_instance_;
}

Robot_State* Robot_State::default_instance_ = NULL;

Robot_State* Robot_State::New() const {
  return new Robot_State;
}

void Robot_State::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_pose()) {
      if (pose_ != NULL) pose_->::vss_state::Pose::Clear();
    }
    if (has_v_pose()) {
      if (v_pose_ != NULL) v_pose_->::vss_state::Pose::Clear();
    }
    if (has_k_pose()) {
      if (k_pose_ != NULL) k_pose_->::vss_state::Pose::Clear();
    }
    if (has_k_v_pose()) {
      if (k_v_pose_ != NULL) k_v_pose_->::vss_state::Pose::Clear();
    }
    if (has_color()) {
      if (color_ != NULL) color_->::vss_state::RGB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Robot_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vss_state.Robot_State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vss_state.Pose pose = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_v_pose;
        break;
      }

      // optional .vss_state.Pose v_pose = 2;
      case 2: {
        if (tag == 18) {
         parse_v_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_k_pose;
        break;
      }

      // optional .vss_state.Pose k_pose = 3;
      case 3: {
        if (tag == 26) {
         parse_k_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_k_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_k_v_pose;
        break;
      }

      // optional .vss_state.Pose k_v_pose = 4;
      case 4: {
        if (tag == 34) {
         parse_k_v_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_k_v_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_color;
        break;
      }

      // optional .vss_state.RGB color = 5;
      case 5: {
        if (tag == 42) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vss_state.Robot_State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vss_state.Robot_State)
  return false;
#undef DO_
}

void Robot_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vss_state.Robot_State)
  // required .vss_state.Pose pose = 1;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pose(), output);
  }

  // optional .vss_state.Pose v_pose = 2;
  if (has_v_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->v_pose(), output);
  }

  // optional .vss_state.Pose k_pose = 3;
  if (has_k_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->k_pose(), output);
  }

  // optional .vss_state.Pose k_v_pose = 4;
  if (has_k_v_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->k_v_pose(), output);
  }

  // optional .vss_state.RGB color = 5;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vss_state.Robot_State)
}

::google::protobuf::uint8* Robot_State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vss_state.Robot_State)
  // required .vss_state.Pose pose = 1;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pose(), target);
  }

  // optional .vss_state.Pose v_pose = 2;
  if (has_v_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->v_pose(), target);
  }

  // optional .vss_state.Pose k_pose = 3;
  if (has_k_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->k_pose(), target);
  }

  // optional .vss_state.Pose k_v_pose = 4;
  if (has_k_v_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->k_v_pose(), target);
  }

  // optional .vss_state.RGB color = 5;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vss_state.Robot_State)
  return target;
}

int Robot_State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vss_state.Pose pose = 1;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

    // optional .vss_state.Pose v_pose = 2;
    if (has_v_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->v_pose());
    }

    // optional .vss_state.Pose k_pose = 3;
    if (has_k_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->k_pose());
    }

    // optional .vss_state.Pose k_v_pose = 4;
    if (has_k_v_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->k_v_pose());
    }

    // optional .vss_state.RGB color = 5;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot_State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Robot_State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Robot_State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Robot_State::MergeFrom(const Robot_State& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pose()) {
      mutable_pose()->::vss_state::Pose::MergeFrom(from.pose());
    }
    if (from.has_v_pose()) {
      mutable_v_pose()->::vss_state::Pose::MergeFrom(from.v_pose());
    }
    if (from.has_k_pose()) {
      mutable_k_pose()->::vss_state::Pose::MergeFrom(from.k_pose());
    }
    if (from.has_k_v_pose()) {
      mutable_k_v_pose()->::vss_state::Pose::MergeFrom(from.k_v_pose());
    }
    if (from.has_color()) {
      mutable_color()->::vss_state::RGB::MergeFrom(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Robot_State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot_State::CopyFrom(const Robot_State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_State::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  if (has_v_pose()) {
    if (!this->v_pose().IsInitialized()) return false;
  }
  if (has_k_pose()) {
    if (!this->k_pose().IsInitialized()) return false;
  }
  if (has_k_v_pose()) {
    if (!this->k_v_pose().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void Robot_State::Swap(Robot_State* other) {
  if (other != this) {
    std::swap(pose_, other->pose_);
    std::swap(v_pose_, other->v_pose_);
    std::swap(k_pose_, other->k_pose_);
    std::swap(k_v_pose_, other->k_v_pose_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Robot_State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Robot_State_descriptor_;
  metadata.reflection = Robot_State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Global_State::kIdFieldNumber;
const int Global_State::kOriginFieldNumber;
const int Global_State::kBallsFieldNumber;
const int Global_State::kRobotsYellowFieldNumber;
const int Global_State::kRobotsBlueFieldNumber;
const int Global_State::kSituationFieldNumber;
const int Global_State::kTimeFieldNumber;
const int Global_State::kGoalsYellowFieldNumber;
const int Global_State::kGoalsBlueFieldNumber;
const int Global_State::kNameYellowFieldNumber;
const int Global_State::kNameBlueFieldNumber;
#endif  // !_MSC_VER

Global_State::Global_State()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vss_state.Global_State)
}

void Global_State::InitAsDefaultInstance() {
}

Global_State::Global_State(const Global_State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vss_state.Global_State)
}

void Global_State::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  origin_ = false;
  situation_ = 0u;
  time_ = 0u;
  goals_yellow_ = 0u;
  goals_blue_ = 0u;
  name_yellow_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_blue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Global_State::~Global_State() {
  // @@protoc_insertion_point(destructor:vss_state.Global_State)
  SharedDtor();
}

void Global_State::SharedDtor() {
  if (name_yellow_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_yellow_;
  }
  if (name_blue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_blue_;
  }
  if (this != default_instance_) {
  }
}

void Global_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Global_State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Global_State_descriptor_;
}

const Global_State& Global_State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_state_2eproto();
  return *default_instance_;
}

Global_State* Global_State::default_instance_ = NULL;

Global_State* Global_State::New() const {
  return new Global_State;
}

void Global_State::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Global_State*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 227) {
    ZR_(id_, origin_);
    ZR_(situation_, goals_yellow_);
  }
  if (_has_bits_[8 / 32] & 1792) {
    goals_blue_ = 0u;
    if (has_name_yellow()) {
      if (name_yellow_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_yellow_->clear();
      }
    }
    if (has_name_blue()) {
      if (name_blue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_blue_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  balls_.Clear();
  robots_yellow_.Clear();
  robots_blue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Global_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vss_state.Global_State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_origin;
        break;
      }

      // optional bool origin = 2;
      case 2: {
        if (tag == 16) {
         parse_origin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &origin_)));
          set_has_origin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_balls;
        break;
      }

      // repeated .vss_state.Ball_State balls = 3;
      case 3: {
        if (tag == 26) {
         parse_balls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_balls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_balls;
        if (input->ExpectTag(34)) goto parse_robots_yellow;
        break;
      }

      // repeated .vss_state.Robot_State robots_yellow = 4;
      case 4: {
        if (tag == 34) {
         parse_robots_yellow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots_yellow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_robots_yellow;
        if (input->ExpectTag(42)) goto parse_robots_blue;
        break;
      }

      // repeated .vss_state.Robot_State robots_blue = 5;
      case 5: {
        if (tag == 42) {
         parse_robots_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots_blue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_robots_blue;
        if (input->ExpectTag(48)) goto parse_situation;
        break;
      }

      // optional uint32 situation = 6;
      case 6: {
        if (tag == 48) {
         parse_situation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &situation_)));
          set_has_situation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional uint32 time = 7;
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_goals_yellow;
        break;
      }

      // optional uint32 goals_yellow = 8;
      case 8: {
        if (tag == 64) {
         parse_goals_yellow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goals_yellow_)));
          set_has_goals_yellow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_goals_blue;
        break;
      }

      // optional uint32 goals_blue = 9;
      case 9: {
        if (tag == 72) {
         parse_goals_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goals_blue_)));
          set_has_goals_blue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_name_yellow;
        break;
      }

      // optional string name_yellow = 10;
      case 10: {
        if (tag == 82) {
         parse_name_yellow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_yellow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name_yellow().data(), this->name_yellow().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name_yellow");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_name_blue;
        break;
      }

      // optional string name_blue = 11;
      case 11: {
        if (tag == 90) {
         parse_name_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_blue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name_blue().data(), this->name_blue().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name_blue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vss_state.Global_State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vss_state.Global_State)
  return false;
#undef DO_
}

void Global_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vss_state.Global_State)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bool origin = 2;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->origin(), output);
  }

  // repeated .vss_state.Ball_State balls = 3;
  for (int i = 0; i < this->balls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->balls(i), output);
  }

  // repeated .vss_state.Robot_State robots_yellow = 4;
  for (int i = 0; i < this->robots_yellow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->robots_yellow(i), output);
  }

  // repeated .vss_state.Robot_State robots_blue = 5;
  for (int i = 0; i < this->robots_blue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->robots_blue(i), output);
  }

  // optional uint32 situation = 6;
  if (has_situation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->situation(), output);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time(), output);
  }

  // optional uint32 goals_yellow = 8;
  if (has_goals_yellow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->goals_yellow(), output);
  }

  // optional uint32 goals_blue = 9;
  if (has_goals_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->goals_blue(), output);
  }

  // optional string name_yellow = 10;
  if (has_name_yellow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_yellow().data(), this->name_yellow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name_yellow");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name_yellow(), output);
  }

  // optional string name_blue = 11;
  if (has_name_blue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_blue().data(), this->name_blue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name_blue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->name_blue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vss_state.Global_State)
}

::google::protobuf::uint8* Global_State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vss_state.Global_State)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bool origin = 2;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->origin(), target);
  }

  // repeated .vss_state.Ball_State balls = 3;
  for (int i = 0; i < this->balls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->balls(i), target);
  }

  // repeated .vss_state.Robot_State robots_yellow = 4;
  for (int i = 0; i < this->robots_yellow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->robots_yellow(i), target);
  }

  // repeated .vss_state.Robot_State robots_blue = 5;
  for (int i = 0; i < this->robots_blue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->robots_blue(i), target);
  }

  // optional uint32 situation = 6;
  if (has_situation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->situation(), target);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time(), target);
  }

  // optional uint32 goals_yellow = 8;
  if (has_goals_yellow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->goals_yellow(), target);
  }

  // optional uint32 goals_blue = 9;
  if (has_goals_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->goals_blue(), target);
  }

  // optional string name_yellow = 10;
  if (has_name_yellow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_yellow().data(), this->name_yellow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name_yellow");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name_yellow(), target);
  }

  // optional string name_blue = 11;
  if (has_name_blue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_blue().data(), this->name_blue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name_blue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->name_blue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vss_state.Global_State)
  return target;
}

int Global_State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool origin = 2;
    if (has_origin()) {
      total_size += 1 + 1;
    }

    // optional uint32 situation = 6;
    if (has_situation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->situation());
    }

    // optional uint32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 goals_yellow = 8;
    if (has_goals_yellow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goals_yellow());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 goals_blue = 9;
    if (has_goals_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goals_blue());
    }

    // optional string name_yellow = 10;
    if (has_name_yellow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_yellow());
    }

    // optional string name_blue = 11;
    if (has_name_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_blue());
    }

  }
  // repeated .vss_state.Ball_State balls = 3;
  total_size += 1 * this->balls_size();
  for (int i = 0; i < this->balls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->balls(i));
  }

  // repeated .vss_state.Robot_State robots_yellow = 4;
  total_size += 1 * this->robots_yellow_size();
  for (int i = 0; i < this->robots_yellow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots_yellow(i));
  }

  // repeated .vss_state.Robot_State robots_blue = 5;
  total_size += 1 * this->robots_blue_size();
  for (int i = 0; i < this->robots_blue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots_blue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Global_State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Global_State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Global_State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Global_State::MergeFrom(const Global_State& from) {
  GOOGLE_CHECK_NE(&from, this);
  balls_.MergeFrom(from.balls_);
  robots_yellow_.MergeFrom(from.robots_yellow_);
  robots_blue_.MergeFrom(from.robots_blue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_origin()) {
      set_origin(from.origin());
    }
    if (from.has_situation()) {
      set_situation(from.situation());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_goals_yellow()) {
      set_goals_yellow(from.goals_yellow());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_goals_blue()) {
      set_goals_blue(from.goals_blue());
    }
    if (from.has_name_yellow()) {
      set_name_yellow(from.name_yellow());
    }
    if (from.has_name_blue()) {
      set_name_blue(from.name_blue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Global_State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Global_State::CopyFrom(const Global_State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global_State::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->balls())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->robots_yellow())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->robots_blue())) return false;
  return true;
}

void Global_State::Swap(Global_State* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(origin_, other->origin_);
    balls_.Swap(&other->balls_);
    robots_yellow_.Swap(&other->robots_yellow_);
    robots_blue_.Swap(&other->robots_blue_);
    std::swap(situation_, other->situation_);
    std::swap(time_, other->time_);
    std::swap(goals_yellow_, other->goals_yellow_);
    std::swap(goals_blue_, other->goals_blue_);
    std::swap(name_yellow_, other->name_yellow_);
    std::swap(name_blue_, other->name_blue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Global_State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Global_State_descriptor_;
  metadata.reflection = Global_State_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vss_state

// @@protoc_insertion_point(global_scope)
